//
//  StyleKit.swift
//  SlideRating
//
//  Created by Corrine Toracchio on 3/5/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 122, height: 122), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 122, height: 122), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 122, y: resizedFrame.height / 122)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 60.33, y: 114.29))
        mask.addCurve(to: CGPoint(x: 117.5, y: 41.03), controlPoint1: CGPoint(x: 60.33, y: 114.29), controlPoint2: CGPoint(x: 113.2, y: 74.99))
        mask.addCurve(to: CGPoint(x: 90, y: 8.99), controlPoint1: CGPoint(x: 119.23, y: 27.45), controlPoint2: CGPoint(x: 109.52, y: 8.99))
        mask.addCurve(to: CGPoint(x: 60.13, y: 30.63), controlPoint1: CGPoint(x: 72.02, y: 8.99), controlPoint2: CGPoint(x: 61.65, y: 27.7))
        mask.addCurve(to: CGPoint(x: 30.27, y: 8.99), controlPoint1: CGPoint(x: 58.62, y: 27.7), controlPoint2: CGPoint(x: 48.25, y: 8.99))
        mask.addCurve(to: CGPoint(x: 2.76, y: 41.03), controlPoint1: CGPoint(x: 10.75, y: 8.99), controlPoint2: CGPoint(x: 1.04, y: 27.45))
        mask.addCurve(to: CGPoint(x: 60.33, y: 114.29), controlPoint1: CGPoint(x: 7.07, y: 74.99), controlPoint2: CGPoint(x: 60.33, y: 114.29))
        mask.close()
        mask.move(to: CGPoint.zero)
        mask.addLine(to: CGPoint(x: 122, y: 0))
        mask.addLine(to: CGPoint(x: 122, y: 122))
        mask.addLine(to: CGPoint(x: 0, y: 122))
        mask.addLine(to: CGPoint.zero)
        mask.close()
        mask.move(to: CGPoint.zero)
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor.white.setFill()
        mask.fill()
        mask.lineWidth = 1
        UIColor.white.setStroke()
        mask.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawStar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 122, height: 122), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 122, height: 122), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 122, y: resizedFrame.height / 122)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint.zero)
        mask.addLine(to: CGPoint(x: 122, y: 0))
        mask.addLine(to: CGPoint(x: 122, y: 122))
        mask.addLine(to: CGPoint(x: 0, y: 122))
        mask.addLine(to: CGPoint.zero)
        mask.close()
        mask.move(to: CGPoint(x: 60.58, y: 97.92))
        mask.addLine(to: CGPoint(x: 96.44, y: 116.77))
        mask.addLine(to: CGPoint(x: 89.59, y: 76.85))
        mask.addLine(to: CGPoint(x: 118.6, y: 48.57))
        mask.addLine(to: CGPoint(x: 78.51, y: 42.75))
        mask.addLine(to: CGPoint(x: 60.58, y: 6.42))
        mask.addLine(to: CGPoint(x: 42.66, y: 42.75))
        mask.addLine(to: CGPoint(x: 2.57, y: 48.57))
        mask.addLine(to: CGPoint(x: 31.58, y: 76.85))
        mask.addLine(to: CGPoint(x: 24.73, y: 116.77))
        mask.addLine(to: CGPoint(x: 60.58, y: 97.92))
        mask.close()
        mask.move(to: CGPoint(x: 60.58, y: 97.92))
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor.white.setFill()
        mask.fill()
        mask.lineWidth = 1
        UIColor.white.setStroke()
        mask.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawPalette(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 348, height: 482), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 348, height: 482), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 348, y: resizedFrame.height / 482)
        
        /// Red
        let red = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 29, y: 33)
        UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setFill()
        red.fill()
        context.restoreGState()
        /// Orange
        let orange = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 136, y: 33)
        UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1).setFill()
        orange.fill()
        context.restoreGState()
        /// Yellow
        let yellow = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 243, y: 33)
        UIColor(hue: 0.154, saturation: 0.887, brightness: 0.971, alpha: 1).setFill()
        yellow.fill()
        context.restoreGState()
        /// Green
        let green = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 29, y: 139)
        UIColor(hue: 0.246, saturation: 0.843, brightness: 0.826, alpha: 1).setFill()
        green.fill()
        context.restoreGState()
        /// Lime
        let lime = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 136, y: 139)
        UIColor(hue: 0.249, saturation: 0.422, brightness: 0.913, alpha: 1).setFill()
        lime.fill()
        context.restoreGState()
        /// Blue
        let blue = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 243, y: 139)
        UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
        blue.fill()
        context.restoreGState()
        /// Aquamarine
        let aquamarine = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 29, y: 245)
        UIColor(hue: 0.463, saturation: 0.646, brightness: 0.888, alpha: 1).setFill()
        aquamarine.fill()
        context.restoreGState()
        /// Violet
        let violet = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 136, y: 245)
        UIColor(hue: 0.805, saturation: 0.93, brightness: 0.879, alpha: 1).setFill()
        violet.fill()
        context.restoreGState()
        /// Purple
        let purple = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 243, y: 245)
        UIColor(hue: 0.755, saturation: 0.927, brightness: 0.995, alpha: 1).setFill()
        purple.fill()
        context.restoreGState()
        /// Black
        let black = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 29, y: 351)
        UIColor.black.setFill()
        black.fill()
        context.restoreGState()
        /// Charcoal
        let charcoal = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 136, y: 351)
        UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1).setFill()
        charcoal.fill()
        context.restoreGState()
        /// Chalk
        let chalk = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        context.saveGState()
        context.translateBy(x: 243, y: 351)
        UIColor(white: 0.847, alpha: 1).setFill()
        chalk.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfHeart() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 122, height: 122), false, 0)
        StyleKit.drawHeart()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfStar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 122, height: 122), false, 0)
        StyleKit.drawStar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPalette() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 348, height: 482), false, 0)
        StyleKit.drawPalette()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
